/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/simple/networks/{network}/token_price/{addresses}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Token Price by Token Addresses
         * @description This endpoint allows you to **get token price based on the provided token contract address on a network**
         */
        get: operations["onchain-simple-price"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Supported Networks List (ID Map)
         * @description This endpoint allows you to **query all the supported networks on GeckoTerminal**
         */
        get: operations["networks-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/dexes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Supported Dexes List by Network (ID Map)
         * @description This endpoint allows you to **query all the supported decentralized exchanges (dexes) based on the provided network on GeckoTerminal**
         */
        get: operations["dexes-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/trending_pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Trending Pools List
         * @description This endpoint allows you to **query all the trending pools across all networks on GeckoTerminal**
         */
        get: operations["trending-pools-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/trending_pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Trending Pools by Network
         * @description This endpoint allows you to **query the trending pools based on the provided network**
         */
        get: operations["trending-pools-network"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/pools/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Specific Pool Data by Pool Address
         * @description This endpoint allows you to **query the specific pool based on the provided network and pool address**
         */
        get: operations["pool-address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/pools/multi/{addresses}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Multiple Pools Data by Pool Addresses
         * @description This endpoint allows you to **query multiple pools based on the provided network and pool address**
         */
        get: operations["pools-addresses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Top Pools by Network
         * @description This endpoint allows you to **query all the top pools based on the provided network**
         */
        get: operations["top-pools-network"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/dexes/{dex}/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Top Pools by Dex
         * @description This endpoint allows you to **query all the top pools based on the provided network and decentralized exchange (dex)**
         */
        get: operations["top-pools-dex"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/new_pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * New Pools by Network
         * @description This endpoint allows you to **query all the latest pools based on provided network**
         */
        get: operations["latest-pools-network"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/new_pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * New Pools List
         * @description This endpoint allows you to **query all the latest pools across all networks on GeckoTerminal**
         */
        get: operations["latest-pools-list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Pools
         * @description This endpoint allows you to **search for pools on a network**
         */
        get: operations["search-pools"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/tokens/{token_address}/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Top Pools by Token Address
         * @description This endpoint allows you to **query top pools based on the provided token contract address on a network**
         */
        get: operations["top-pools-contract-address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/tokens/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Token Data by Token Address
         * @description This endpoint allows you to **query specific token data based on the provided token contract address on a network**
         */
        get: operations["token-data-contract-address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/tokens/multi/{addresses}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Tokens Data by Token Addresses
         * @description This endpoint allows you to **query multiple tokens data based on the provided token contract addresses on a network**
         */
        get: operations["tokens-data-contract-addresses"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/tokens/{address}/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Token Info by Token Address
         * @description This endpoint allows you to **query specific token info such as name,symbol, coingecko id etc. based on provided token contract address on a network**
         */
        get: operations["token-info-contract-address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/pools/{pool_address}/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Pool Tokens Info by Pool Address
         * @description This endpoint allows you to **query pool info including base and quote token info based on provided pool contract address on a network**
         */
        get: operations["pool-token-info-contract-address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/info_recently_updated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Most Recently Updated Tokens List
         * @description This endpoint allows you to **query 100 most recently updated tokens info of a specific network or across all networks on GeckoTerminal**
         */
        get: operations["tokens-info-recent-updated"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/pools/{pool_address}/ohlcv/{timeframe}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Pool OHLCV chart by Pool Address
         * @description This endpoint allows you to **get the OHLCV chart (Open, High, Low, Close, Volume) of a pool based on the provided pool address on a network**
         */
        get: operations["pool-ohlcv-contract-address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{network}/pools/{pool_address}/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Past 24 Hour Trades by Pool Address
         * @description This endpoint allows you to **query the last 300 trades in the past 24 hours based on the provided pool address**
         */
        get: operations["pool-trades-contract-address"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "data": {
         *         "id": "1ba898f0-eda2-4291-9491-9a5b323f66ef",
         *         "type": "simple_token_price",
         *         "attributes": {
         *           "token_prices": {
         *             "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2": "3639.78228844745"
         *           }
         *         }
         *       }
         *     } */
        SimplePrice: {
            data?: {
                id?: string;
                type?: string;
                attributes?: {
                    token_prices?: {
                        [key: string]: string | undefined;
                    };
                };
            };
        };
        /** @example {
         *       "data": [
         *         {
         *           "id": "eth",
         *           "type": "network",
         *           "attributes": {
         *             "name": "Ethereum",
         *             "coingecko_asset_platform_id": "ethereum"
         *           }
         *         },
         *         {
         *           "id": "bsc",
         *           "type": "network",
         *           "attributes": {
         *             "name": "BNB Chain",
         *             "coingecko_asset_platform_id": "binance-smart-chain"
         *           }
         *         },
         *         {
         *           "id": "polygon_pos",
         *           "type": "network",
         *           "attributes": {
         *             "name": "Polygon POS",
         *             "coingecko_asset_platform_id": "polygon-pos"
         *           }
         *         }
         *       ]
         *     } */
        NetworksList: {
            data?: {
                id?: string;
                type?: string;
                attributes?: {
                    name?: string;
                    coingecko_asset_platform_id?: string;
                };
            }[];
        };
        /** @example {
         *       "data": [
         *         {
         *           "id": "uniswap_v2",
         *           "type": "dex",
         *           "attributes": {
         *             "name": "Uniswap V2"
         *           }
         *         },
         *         {
         *           "id": "sushiswap",
         *           "type": "dex",
         *           "attributes": {
         *             "name": "SushiSwap"
         *           }
         *         },
         *         {
         *           "id": "uniswap_v3",
         *           "type": "dex",
         *           "attributes": {
         *             "name": "Uniswap V3"
         *           }
         *         }
         *       ]
         *     } */
        DexesList: {
            data?: {
                id?: string;
                type?: string;
                attributes?: {
                    name?: string;
                };
            }[];
        };
        /** @example {
         *       "data": [
         *         {
         *           "id": "eth_0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
         *           "type": "pool",
         *           "attributes": {
         *             "base_token_price_usd": "3653.12491645176",
         *             "base_token_price_native_currency": "1.0",
         *             "quote_token_price_usd": "0.998343707926245",
         *             "quote_token_price_native_currency": "0.000273040545093221",
         *             "base_token_price_quote_token": "3662.46",
         *             "quote_token_price_base_token": "0.00027304",
         *             "address": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
         *             "name": "WETH / USDC 0.05%",
         *             "pool_created_at": "2021-12-29T12:35:14Z",
         *             "fdv_usd": "11007041041",
         *             "market_cap_usd": null,
         *             "price_change_percentage": {
         *               "m5": "0",
         *               "h1": "0.51",
         *               "h6": "0.86",
         *               "h24": "7.71"
         *             },
         *             "transactions": {
         *               "m5": {
         *                 "buys": 7,
         *                 "sells": 2,
         *                 "buyers": 7,
         *                 "sellers": 2
         *               },
         *               "m15": {
         *                 "buys": 19,
         *                 "sells": 27,
         *                 "buyers": 19,
         *                 "sellers": 27
         *               },
         *               "m30": {
         *                 "buys": 49,
         *                 "sells": 61,
         *                 "buyers": 45,
         *                 "sellers": 57
         *               },
         *               "h1": {
         *                 "buys": 97,
         *                 "sells": 144,
         *                 "buyers": 83,
         *                 "sellers": 124
         *               },
         *               "h24": {
         *                 "buys": 2966,
         *                 "sells": 3847,
         *                 "buyers": 1625,
         *                 "sellers": 2399
         *               }
         *             },
         *             "volume_usd": {
         *               "m5": "868581.7348314",
         *               "h1": "16798158.0138526",
         *               "h6": "164054610.850188",
         *               "h24": "536545444.904535"
         *             },
         *             "reserve_in_usd": "163988541.3812"
         *           },
         *           "relationships": {
         *             "base_token": {
         *               "data": {
         *                 "id": "eth_0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
         *                 "type": "token"
         *               }
         *             },
         *             "quote_token": {
         *               "data": {
         *                 "id": "eth_0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
         *                 "type": "token"
         *               }
         *             },
         *             "dex": {
         *               "data": {
         *                 "id": "uniswap_v3",
         *                 "type": "dex"
         *               }
         *             }
         *           }
         *         }
         *       ],
         *       "included": [
         *         {
         *           "id": "eth_0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
         *           "type": "token",
         *           "attributes": {
         *             "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
         *             "name": "Wrapped Ether",
         *             "symbol": "WETH",
         *             "image_url": "https://assets.coingecko.com/coins/images/2518/small/weth.png?1696503332",
         *             "coingecko_coin_id": "weth"
         *           }
         *         }
         *       ]
         *     } */
        Pool: {
            data?: {
                id?: string;
                type?: string;
                attributes?: {
                    base_token_price_usd?: string;
                    base_token_price_native_currency?: string;
                    quote_token_price_usd?: string;
                    quote_token_price_native_currency?: string;
                    base_token_price_quote_token?: string;
                    quote_token_price_base_token?: string;
                    address?: string;
                    name?: string;
                    pool_created_at?: string;
                    fdv_usd?: string;
                    market_cap_usd?: string;
                    price_change_percentage?: {
                        m5?: string;
                        h1?: string;
                        h6?: string;
                        h24?: string;
                    };
                    transactions?: {
                        m5?: {
                            buys?: number;
                            sells?: number;
                            buyers?: number;
                            sellers?: number;
                        };
                        m15?: {
                            buys?: number;
                            sells?: number;
                            buyers?: number;
                            sellers?: number;
                        };
                        m30?: {
                            buys?: number;
                            sells?: number;
                            buyers?: number;
                            sellers?: number;
                        };
                        h1?: {
                            buys?: number;
                            sells?: number;
                            buyers?: number;
                            sellers?: number;
                        };
                        h24?: {
                            buys?: number;
                            sells?: number;
                            buyers?: number;
                            sellers?: number;
                        };
                    };
                    volume_usd?: {
                        m5?: string;
                        h1?: string;
                        h6?: string;
                        h24?: string;
                    };
                    reserve_in_usd?: string;
                };
                relationships?: {
                    base_token?: {
                        data?: {
                            id?: string;
                            type?: string;
                        };
                    };
                    quote_token?: {
                        data?: {
                            id?: string;
                            type?: string;
                        };
                    };
                    network?: {
                        data?: {
                            id?: string;
                            type?: string;
                        };
                    };
                    dex?: {
                        data?: {
                            id?: string;
                            type?: string;
                        };
                    };
                };
            }[];
            included?: {
                id?: string;
                type?: string;
                attributes?: {
                    address?: string;
                    name?: string;
                    symbol?: string;
                    image_url?: string;
                    coingecko_coin_id?: string;
                };
            }[];
        };
        /** @example {
         *       "data": {
         *         "id": "eth_0xdac17f958d2ee523a2206206994597c13d831ec7",
         *         "type": "token",
         *         "attributes": {
         *           "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
         *           "name": "Tether USD",
         *           "symbol": "USDT",
         *           "image_url": "https://assets.coingecko.com/coins/images/325/small/Tether.png?1696501661",
         *           "coingecko_coin_id": "tether",
         *           "decimals": 6,
         *           "total_supply": "49999156520373530.0",
         *           "price_usd": "0.99720157",
         *           "fdv_usd": "49859223957",
         *           "total_reserve_in_usd": "417994486.4342195821530162288",
         *           "volume_usd": {
         *             "h24": "814387053.106936"
         *           },
         *           "market_cap_usd": "106918274170.211"
         *         },
         *         "relationships": {
         *           "top_pools": {
         *             "data": [
         *               {
         *                 "id": "eth_0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7",
         *                 "type": "pool"
         *               },
         *               {
         *                 "id": "eth_0x3416cf6c708da44db2624d63ea0aaef7113527c6",
         *                 "type": "pool"
         *               },
         *               {
         *                 "id": "eth_0x11b815efb8f581194ae79006d24e0d814b7697f6",
         *                 "type": "pool"
         *               }
         *             ]
         *           }
         *         }
         *       },
         *       "included": [
         *         {
         *           "id": "eth_0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7",
         *           "type": "pool",
         *           "attributes": {
         *             "base_token_price_usd": "0.999745541005697",
         *             "base_token_price_native_currency": "0.000273214695167948",
         *             "quote_token_price_usd": "0.997201571758263",
         *             "quote_token_price_native_currency": "0.000274189521081092",
         *             "base_token_price_quote_token": "0.99644470",
         *             "quote_token_price_base_token": "1.00356798",
         *             "address": "0xbebc44782c7db0a1a60cb6fe97d0b483032ff1c7",
         *             "name": "DAI / USDC / USDT",
         *             "pool_created_at": "2022-07-13T11:48:12Z",
         *             "token_price_usd": "0.999745541005697",
         *             "fdv_usd": "3270150238",
         *             "market_cap_usd": "4870754520.25286",
         *             "price_change_percentage": {
         *               "m5": "0",
         *               "h1": "-0.15",
         *               "h6": "-0.5",
         *               "h24": "-0.19"
         *             },
         *             "transactions": {
         *               "m5": {
         *                 "buys": 0,
         *                 "sells": 0,
         *                 "buyers": null,
         *                 "sellers": null
         *               },
         *               "m15": {
         *                 "buys": 1,
         *                 "sells": 0,
         *                 "buyers": null,
         *                 "sellers": null
         *               },
         *               "m30": {
         *                 "buys": 2,
         *                 "sells": 0,
         *                 "buyers": null,
         *                 "sellers": null
         *               },
         *               "h1": {
         *                 "buys": 4,
         *                 "sells": 1,
         *                 "buyers": null,
         *                 "sellers": null
         *               },
         *               "h24": {
         *                 "buys": 67,
         *                 "sells": 84,
         *                 "buyers": null,
         *                 "sellers": null
         *               }
         *             },
         *             "volume_usd": {
         *               "m5": "0.0",
         *               "h1": "1502319.288637997",
         *               "h6": "45415206.49514137",
         *               "h24": "69802183.6886975"
         *             },
         *             "reserve_in_usd": "184383775.4111"
         *           },
         *           "relationships": {
         *             "base_token": {
         *               "data": {
         *                 "id": "eth_0x6b175474e89094c44da98b954eedeac495271d0f",
         *                 "type": "token"
         *               }
         *             },
         *             "quote_token": {
         *               "data": {
         *                 "id": "eth_0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
         *                 "type": "token"
         *               }
         *             },
         *             "dex": {
         *               "data": {
         *                 "id": "curve",
         *                 "type": "dex"
         *               }
         *             }
         *           }
         *         }
         *       ]
         *     } */
        Token: {
            data?: {
                id?: string;
                type?: string;
                attributes?: {
                    address?: string;
                    name?: string;
                    symbol?: string;
                    image_url?: string;
                    coingecko_coin_id?: string;
                    decimals?: number;
                    total_supply?: string;
                    price_usd?: string;
                    fdv_usd?: string;
                    total_reserve_in_usd?: string;
                    volume_usd?: {
                        h24?: string;
                    };
                    market_cap_usd?: string;
                };
                relationships?: {
                    top_pools?: {
                        data?: {
                            id?: string;
                            type?: string;
                        }[];
                    };
                };
            };
            included?: {
                id?: string;
                type?: string;
                attributes?: {
                    base_token_price_usd?: string;
                    base_token_price_native_currency?: string;
                    quote_token_price_usd?: string;
                    quote_token_price_native_currency?: string;
                    base_token_price_quote_token?: string;
                    quote_token_price_base_token?: string;
                    address?: string;
                    name?: string;
                    pool_created_at?: string;
                    token_price_usd?: string;
                    fdv_usd?: string;
                    market_cap_usd?: string;
                    price_change_percentage?: {
                        m5?: string;
                        h1?: string;
                        h6?: string;
                        h24?: string;
                    };
                    transactions?: {
                        m5?: {
                            buys?: number;
                            sells?: number;
                            buyers?: number;
                            sellers?: number;
                        };
                        m15?: {
                            buys?: number;
                            sells?: number;
                            buyers?: number;
                            sellers?: number;
                        };
                        m30?: {
                            buys?: number;
                            sells?: number;
                            buyers?: number;
                            sellers?: number;
                        };
                        h1?: {
                            buys?: number;
                            sells?: number;
                            buyers?: number;
                            sellers?: number;
                        };
                        h24?: {
                            buys?: number;
                            sells?: number;
                            buyers?: number;
                            sellers?: number;
                        };
                    };
                    volume_usd?: {
                        m5?: string;
                        h1?: string;
                        h6?: string;
                        h24?: string;
                    };
                    reserve_in_usd?: string;
                };
                relationships?: {
                    base_token?: {
                        data?: {
                            id?: string;
                            type?: string;
                        };
                    };
                    quote_token?: {
                        data?: {
                            id?: string;
                            type?: string;
                        };
                    };
                    dex?: {
                        data?: {
                            id?: string;
                            type?: string;
                        };
                    };
                };
            }[];
        };
        /** @example {
         *       "data": {
         *         "id": "eth_0xdac17f958d2ee523a2206206994597c13d831ec7",
         *         "type": "token",
         *         "attributes": {
         *           "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
         *           "name": "Tether USD",
         *           "symbol": "USDT",
         *           "image_url": "https://assets.coingecko.com/coins/images/325/small/Tether.png?1696501661",
         *           "coingecko_coin_id": "tether",
         *           "websites": [
         *             "https://tether.to/"
         *           ],
         *           "description": "Tether (USDT) is a cryptocurrency with a value meant to mirror the value of the U.S. dollar...",
         *           "gt_score": 92.6605504587156,
         *           "discord_url": null,
         *           "telegram_handle": null,
         *           "twitter_handle": "Tether_to"
         *         }
         *       }
         *     } */
        TokenInfo: {
            data?: {
                id?: string;
                type?: string;
                attributes?: {
                    address?: string;
                    name?: string;
                    symbol?: string;
                    image_url?: string;
                    coingecko_coin_id?: string;
                    websites?: string[];
                    description?: string;
                    gt_score?: number;
                    discord_url?: string;
                    telegram_handle?: string;
                    twitter_handle?: string;
                };
            };
        };
        /** @example {
         *       "data": [
         *         {
         *           "id": "eth_0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
         *           "type": "token",
         *           "attributes": {
         *             "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
         *             "name": "Wrapped Ether",
         *             "symbol": "WETH",
         *             "image_url": "https://assets.coingecko.com/coins/images/2518/small/weth.png?1696503332",
         *             "coingecko_coin_id": "weth",
         *             "websites": [
         *               "https://weth.io/"
         *             ],
         *             "description": "WETH is the tokenized/packaged form of ETH that you use to pay for items when you interact with Ethereum dApps...",
         *             "gt_score": 92.6605504587156,
         *             "discord_url": null,
         *             "telegram_handle": null,
         *             "twitter_handle": null
         *           }
         *         },
         *         {
         *           "id": "eth_0xdac17f958d2ee523a2206206994597c13d831ec7",
         *           "type": "token",
         *           "attributes": {
         *             "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
         *             "name": "Tether USD",
         *             "symbol": "USDT",
         *             "image_url": "https://assets.coingecko.com/coins/images/325/small/Tether.png?1696501661",
         *             "coingecko_coin_id": "tether",
         *             "websites": [
         *               "https://tether.to/"
         *             ],
         *             "description": "Tether (USDT) is a cryptocurrency with a value meant to mirror the value of the U.S. dollar. ...",
         *             "gt_score": 92.6605504587156,
         *             "discord_url": null,
         *             "telegram_handle": null,
         *             "twitter_handle": "Tether_to"
         *           }
         *         }
         *       ]
         *     } */
        PoolTokensInfo: components["schemas"]["TokenInfo"];
        /** @example {
         *       "data": [
         *         {
         *           "id": "solana_TNSRxcUxoT9xBG3de7PiJyTDYu7kskLqcpddxnEJAS6",
         *           "type": "token",
         *           "attributes": {
         *             "address": "TNSRxcUxoT9xBG3de7PiJyTDYu7kskLqcpddxnEJAS6",
         *             "name": "Tensor",
         *             "symbol": "TNSR",
         *             "image_url": "https://assets.coingecko.com/coins/images/35972/small/Tensor.jpeg?1710297172",
         *             "coingecko_coin_id": "tensor",
         *             "websites": [],
         *             "description": "TNSR is the native token for the Tensor NFT marketplace on Solana.",
         *             "gt_score": 41.2844036697248,
         *             "metadata_updated_at": "2024-04-08T15:59:04Z",
         *             "discord_url": null,
         *             "telegram_handle": null,
         *             "twitter_handle": "TensorFdn"
         *           },
         *           "relationships": {
         *             "network": {
         *               "data": {
         *                 "id": "solana",
         *                 "type": "network"
         *               }
         *             }
         *           }
         *         }
         *       ]
         *     } */
        TokenInfoRecentlyUpdated: components["schemas"]["TokenInfo"];
        /** @example {
         *       "data": {
         *         "id": "bc786a99-7205-4c80-aaa1-b9634d97c926",
         *         "type": "ohlcv_request_response",
         *         "attributes": {
         *           "ohlcv_list": [
         *             [
         *               1712534400,
         *               3454.61590249189,
         *               3660.85954963415,
         *               3417.91885296256,
         *               3660.85954963415,
         *               306823.277031161
         *             ],
         *             [
         *               1712448000,
         *               3362.60273217873,
         *               3455.28884490954,
         *               3352.95305060685,
         *               3454.61590249189,
         *               242144.864784184
         *             ],
         *             [
         *               1712361600,
         *               3323.05578706056,
         *               3391.19811016133,
         *               3317.73497182435,
         *               3362.60273217873,
         *               273323.661682931
         *             ]
         *           ]
         *         }
         *       },
         *       "meta": {
         *         "base": {
         *           "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
         *           "name": "Wrapped Ether",
         *           "symbol": "WETH",
         *           "coingecko_coin_id": "weth"
         *         },
         *         "quote": {
         *           "address": "0xdac17f958d2ee523a2206206994597c13d831ec7",
         *           "name": "Tether USD",
         *           "symbol": "USDT",
         *           "coingecko_coin_id": "tether"
         *         }
         *       }
         *     } */
        OHLCV: {
            data?: {
                id?: string;
                type?: string;
                attributes?: {
                    ohlcv_list?: number[][];
                };
            };
            meta?: {
                base?: {
                    address?: string;
                    name?: string;
                    symbol?: string;
                    coingecko_coin_id?: string;
                };
                quote?: {
                    address?: string;
                    name?: string;
                    symbol?: string;
                    coingecko_coin_id?: string;
                };
            };
        };
        /** @example {
         *       "data": [
         *         {
         *           "id": "eth_19612255_0x0b8ac5a16c291832c1b4d5f0d8ef2d9d58e207cd8132c32392295617daa4d422_158_1712595165",
         *           "type": "trade",
         *           "attributes": {
         *             "block_number": 19612255,
         *             "tx_hash": "0x0b8ac5a16c291832c1b4d5f0d8ef2d9d58e207cd8132c32392295617daa4d422",
         *             "tx_from_address": "0x42c037c594eefeca741e9dd66af91e7ffd930872",
         *             "from_token_amount": "1.51717616246451",
         *             "to_token_amount": "5535.099061",
         *             "price_from_in_currency_token": "1.0",
         *             "price_to_in_currency_token": "0.000274100995437363",
         *             "price_from_in_usd": "3656.8970003075",
         *             "price_to_in_usd": "1.00235910799619",
         *             "block_timestamp": "2024-04-08T16:52:35Z",
         *             "kind": "buy",
         *             "volume_in_usd": "5548.15695745452",
         *             "from_token_address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
         *             "to_token_address": "0xdac17f958d2ee523a2206206994597c13d831ec7"
         *           }
         *         }
         *       ]
         *     } */
        Trades: {
            data?: {
                id?: string;
                type?: string;
                attributes?: {
                    block_number?: number;
                    tx_hash?: string;
                    tx_from_address?: string;
                    from_token_amount?: string;
                    to_token_amount?: string;
                    price_from_in_currency_token?: string;
                    price_to_in_currency_token?: string;
                    price_from_in_usd?: string;
                    price_to_in_usd?: string;
                    block_timestamp?: string;
                    kind?: string;
                    volume_in_usd?: string;
                    from_token_address?: string;
                    to_token_address?: string;
                };
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "onchain-simple-price": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description network id  <br> *refers to [/networks](/reference/networks-list) */
                network: string;
                /** @description token contract address, comma-separated if more than one token contract address,100 addresses */
                addresses: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get current USD prices of multiple tokens on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimplePrice"];
                };
            };
        };
    };
    "networks-list": {
        parameters: {
            query?: {
                /** @description page through results <br> Default value: 1 */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get list of supported networks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NetworksList"];
                };
            };
        };
    };
    "dexes-list": {
        parameters: {
            query?: {
                /** @description page through results <br> Default value: 1 */
                page?: number;
            };
            header?: never;
            path: {
                /** @description network id <br> *refers to [/networks](/reference/networks-list) */
                network: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get list of supported dexes on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DexesList"];
                };
            };
        };
    };
    "trending-pools-list": {
        parameters: {
            query?: {
                /** @description attributes to include, comma-separated if more than one to include <br> Available values: `base_token`, `quote_token`, `dex`, `network`.  <br> Example: `base_token` or `base_token,dex`  */
                include?: string;
                /** @description page through results, maximum 10 pages  <br> Default value: 1 */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get trending pools across all networks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pool"];
                };
            };
        };
    };
    "trending-pools-network": {
        parameters: {
            query?: {
                /** @description attributes to include, comma-separated if more than one to include <br> Available values: `base_token`, `quote_token`, `dex` */
                include?: string;
                /** @description page through results, maximum 10 pages <br> Default value: 1 */
                page?: number;
            };
            header?: never;
            path: {
                /** @description network id <br> *refers to [/networks](/reference/networks-list) */
                network: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get trending pools on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pool"];
                };
            };
        };
    };
    "pool-address": {
        parameters: {
            query?: {
                /** @description attributes to include, comma-separated if more than one to include <br> Available values: `base_token`, `quote_token`, `dex` */
                include?: string;
            };
            header?: never;
            path: {
                /** @description network id <br> *refers to [/networks](/reference/networks-list) */
                network: string;
                /** @description pool address */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get specific pool on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pool"];
                };
            };
        };
    };
    "pools-addresses": {
        parameters: {
            query?: {
                /** @description attributes to include, comma-separated if more than one to include <br> Available values: `base_token`, `quote_token`, `dex` */
                include?: string;
            };
            header?: never;
            path: {
                /** @description network id <br> *refers to [/networks](/reference/networks-list) */
                network: string;
                /** @description pool contract address, comma-separated if more than one pool contract address, maximum 30 addresses */
                addresses: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get multiple pools on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pool"];
                };
            };
        };
    };
    "top-pools-network": {
        parameters: {
            query?: {
                /** @description attributes to include, comma-separated if more than one to include <br> Available values: `base_token`, `quote_token`, `dex` */
                include?: string;
                /** @description page through results, maximum 10 pages <br> Default value: 1 */
                page?: number;
                /** @description sort the pools by field <br> Default value: h24_tx_count_desc */
                sort?: "h24_tx_count_desc" | "h24_volume_usd_desc";
            };
            header?: never;
            path: {
                /** @description network id <br> *refers to [/networks](/reference/networks-list) */
                network: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get top pools on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pool"];
                };
            };
        };
    };
    "top-pools-dex": {
        parameters: {
            query?: {
                /** @description attributes to include, comma-separated if more than one to include <br> Available values: `base_token`, `quote_token`, `dex` */
                include?: string;
                /** @description page through results, maximum 10 pages <br> Default value: 1 */
                page?: number;
                /** @description sort the pools by field <br> Default value: h24_tx_count_desc */
                sort?: "h24_tx_count_desc" | "h24_volume_usd_desc";
            };
            header?: never;
            path: {
                /** @description network id <br> *refers to [/networks](/reference/networks-list) */
                network: string;
                /** @description dex id <br> *refers to [/networks/{network}/dexes](/reference/dexes-list) */
                dex: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get top pools on a network's dex */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pool"];
                };
            };
        };
    };
    "latest-pools-network": {
        parameters: {
            query?: {
                /** @description attributes to include, comma-separated if more than one to include <br> Available values: `base_token`, `quote_token`, `dex` */
                include?: string;
                /** @description page through results, maximum 10 pages <br> Default value: 1 */
                page?: number;
            };
            header?: never;
            path: {
                /** @description network id <br> *refers to [/networks](/reference/networks-list) */
                network: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get latest pools on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pool"];
                };
            };
        };
    };
    "latest-pools-list": {
        parameters: {
            query?: {
                /** @description attributes to include, comma-separated if more than one to include <br> Available values: `base_token`, `quote_token`, `dex`, `network` */
                include?: string;
                /** @description page through results, maximum 10 pages <br> Default value: 1 */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get latest pools across all networks */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pool"];
                };
            };
        };
    };
    "search-pools": {
        parameters: {
            query?: {
                /** @description search query */
                query?: string;
                /** @description network id <br> *refers to [/networks](/reference/networks-list) */
                network?: string;
                /** @description attributes to include, comma-separated if more than one to include <br> Available values: `base_token`, `quote_token`, `dex` */
                include?: string;
                /** @description page through results, maximum 10 pages <br> Default value: 1 */
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search for pools on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pool"];
                };
            };
        };
    };
    "top-pools-contract-address": {
        parameters: {
            query?: {
                /** @description attributes to include, comma-separated if more than one to include <br> Available values: `base_token`, `quote_token`, `dex` */
                include?: string;
                /** @description page through results, maximum 10 pages <br> Default value: 1 */
                page?: number;
                /** @description sort the pools by field <br> Default value: h24_volume_usd_liquidity_desc */
                sort?: "h24_volume_usd_liquidity_desc" | "h24_tx_count_desc" | "h24_volume_usd_desc";
            };
            header?: never;
            path: {
                /** @description network id <br> *refers to [/networks](/reference/networks-list) */
                network: string;
                /** @description token contract address */
                token_address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get top pools for a token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Pool"];
                };
            };
        };
    };
    "token-data-contract-address": {
        parameters: {
            query?: {
                /** @description attributes to include */
                include?: "top_pools";
            };
            header?: never;
            path: {
                /** @description network id  <br> *refers to [/networks](/reference/networks-list)  */
                network: string;
                /** @description token contract address */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get specific token on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
        };
    };
    "tokens-data-contract-addresses": {
        parameters: {
            query?: {
                /** @description attributes to include */
                include?: "top_pools";
            };
            header?: never;
            path: {
                /** @description network id  <br> *refers to [/networks](/reference/networks-list)  */
                network: string;
                /** @description token contract address, comma-separated if more than one token contract address */
                addresses: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get multiple tokens on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
        };
    };
    "token-info-contract-address": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description network id  <br> *refers to [/networks](/reference/networks-list)  */
                network: string;
                /** @description token contract address */
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get specific token info on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenInfo"];
                };
            };
        };
    };
    "pool-token-info-contract-address": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description network id  <br> *refers to [/networks](/reference/networks-list)  */
                network: string;
                /** @description pool contract address */
                pool_address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get pool tokens info on a network */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PoolTokensInfo"];
                };
            };
        };
    };
    "tokens-info-recent-updated": {
        parameters: {
            query?: {
                /** @description Attributes for related resources to include, which will be returned under the top-level 'included' key */
                include?: "network";
                /** @description Filter tokens by provided network  <br> *refers to [/networks](/reference/networks-list)  */
                network?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get 100 tokens info across all networks ordered by most recently updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenInfoRecentlyUpdated"];
                };
            };
        };
    };
    "pool-ohlcv-contract-address": {
        parameters: {
            query?: {
                /** @description time period to aggregate each OHLCV <br> Available values (day) : `1` <br> Available values (hour) : `1` , `4` , `12` <br> Available values (minute) : `1` , `5` , `15` <br> Default value: 1 */
                aggregate?: string;
                /** @description return ohlcv data before this timestamp (integer seconds since epoch) */
                before_timestamp?: number;
                /** @description number of ohlcv results to return, maximum 1000 <br> Default value: 100 */
                limit?: number;
                /** @description return ohlcv in USD or quote token  <br> Default value: usd */
                currency?: "usd" | "token";
                /** @description return ohlcv for token  <br> use this to invert the chart <br> Available values: 'base', 'quote' or token address */
                token?: string;
            };
            header?: never;
            path: {
                /** @description network id  <br> *refers to [/networks](/reference/networks-list) */
                network: string;
                /** @description pool contract address */
                pool_address: string;
                /** @description timeframe of the OHLCV chart */
                timeframe: "day" | "hour" | "minute";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get OHLCV data of a pool */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OHLCV"];
                };
            };
        };
    };
    "pool-trades-contract-address": {
        parameters: {
            query?: {
                /** @description filter trades by trade volume in USD greater than this value <br> Default value: 0 */
                trade_volume_in_usd_greater_than?: number;
            };
            header?: never;
            path: {
                /** @description network id  <br> *refers to [/networks](/reference/networks-list)  */
                network: string;
                /** @description pool contract address */
                pool_address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get last 300 trades in past 24 hours from a pool */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Trades"];
                };
            };
        };
    };
}
